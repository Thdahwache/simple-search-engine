---
description: Best practices for logging in Python applications
globs: 
---
cursor:
  name: Python Logging Rules
  version: 1.0.0
  description: Best practices for logging in Python applications

rules:
  string_formatting:
    title: String Formatting
    description: Rules for formatting log messages
    guidelines:
      - use: %-style formatting
      - avoid: f-strings
      - reason: Lazy evaluation for better performance
    examples:
      correct: 'logger.info("User %s logged in", username)'
      incorrect: 'logger.info(f"User {username} logged in")'

  log_levels:
    title: Log Level Usage
    description: When to use each log level
    levels:
      debug:
        use: Detailed information for debugging
        example: "logger.debug('Processing item %d of %d', i, total)"
      info:
        use: General operational events
        example: "logger.info('Application started successfully')"
      warning:
        use: Unexpected but handled situations
        example: "logger.warning('Retrying operation after failure')"
      error:
        use: Failed operations that need attention
        example: "logger.error('Database connection failed')"
      critical:
        use: System-level failures requiring immediate action
        example: "logger.critical('Out of memory, shutting down')"

  context_management:
    title: Context Management
    description: Managing contextual information in logs
    rules:
      - set_context: 'Use for related log messages'
      - clear_context: 'Always clear after use'
      - scope: 'Context persists until explicitly cleared'
    example: |
      logger.set_context(user_id="123", request_id="abc")
      try:
          # operations
      finally:
          logger.clear_context()

  exception_handling:
    title: Exception Logging
    description: Best practices for logging exceptions
    rules:
      - always_include: exc_info for exceptions
      - capture_stack: True for unexpected errors
    example: |
      try:
          # code
      except Exception as e:
          logger.error("Operation failed: %s", str(e), exc_info=True)

  performance:
    title: Performance Optimization
    description: Guidelines for optimal logging performance
    rules:
      - check_level: 'Before expensive operations'
      - use_lazy: 'Prefer % formatting over f-strings'
      - clear_resources: 'Clean up contexts when done'
    example: |
      if logger.isEnabledFor(logging.DEBUG):
          logger.debug("Expensive msg: %s", expensive_operation())

  security:
    title: Security Guidelines
    description: Rules for secure logging practices
    prohibited:
      - passwords
      - tokens
      - personal_data
      - api_keys
    rules:
      - mask_sensitive: 'Truncate or mask sensitive data'
      - appropriate_levels: 'Use correct levels for security events'
    example: |
      # GOOD
      logger.info("User authenticated: %s", user_id)
      # BAD
      logger.info("Password for user %s: %s", user, password)

  initialization:
    title: Logger Initialization
    description: Setup and configuration rules
    rules:
      - one_per_module: 'Use one logger per module'
      - naming: 'Use __name__ for logger names'
      - configuration:
          development: 'DEBUG level'
          production: 'INFO or higher'
    example: |
      logger = setup_logger(
          __name__,
          level="DEBUG",
          file_path="/var/log/app.log"
      )

  message_structure:
    title: Message Formatting
    description: Guidelines for log message structure
    format: 'action + object + result/state'
    rules:
      - be_specific: 'Include relevant details'
      - be_concise: 'Avoid unnecessary information'
      - be_consistent: 'Follow standard format'
    examples:
      correct: '"User authentication succeeded for user_id=%s"'
      incorrect: '"Authentication OK"'

example_usage: |
  # Module-level logger
  logger = setup_logger(__name__)

  # Function with context
  def process_user_request(user_id: str, request_data: dict):
      logger.set_context(user_id=user_id, request_id=request_data.get("id"))
      try:
          logger.info("Processing request for user %s", user_id)
          # ... processing ...
          logger.debug("Request details: %s", request_data)
      except Exception as e:
          logger.error("Request processing failed: %s", str(e), exc_info=True)
      finally:
          logger.clear_context()